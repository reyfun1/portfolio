{"version":3,"sources":["js/index.js"],"names":["navLinks","document","querySelectorAll","sidebarOpenBtn","querySelector","sidebarCloseBtn","sidebarContainer","sectionTitles","sections","projectSelectors","projectsArr","modal","forEach","link","addEventListener","e","navlink","classList","remove","target","add","toggleContainer","toggle","window","xPosition","touches","clientX","screenWidth","screen","width","contains","widthMatch","matchMedia","cardContainer","cardsArr","nextBtn","prevBtn","cardIndex","TIME","interval","setInterval","run","matches","changeCard","length","style","transform","isSectionOnTheTop","el","i","vHeight","innerHeight","documentElement","clientHeight","yPercentage","getBoundingClientRect","y","id","clearInterval","mm","btn","clickedTabType","getAttribute","project","modalFeed","modalClose","modalNext","modalPrev","modalPictureCounter","modalIndex","changePictureInModal","change","modalPictures","img","arrindex","innerHTML","split","parent","parentElement","minImageEl","fileName","assetType","console","log","imgAssets","src","children"],"mappings":"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","file":"js.db83d0c4.js","sourceRoot":"..","sourcesContent":["import imgAssets from \"../img/projects/**/*.jpg\";\r\n\r\nconst navLinks = document.querySelectorAll('.nav-link')\r\nconst sidebarOpenBtn = document.querySelector('#sidebar-btn')\r\nconst sidebarCloseBtn = document.querySelector('#sidebar-close')\r\nconst sidebarContainer = document.querySelector('.sidebar-container')\r\nconst sectionTitles = document.querySelectorAll('.section-title')\r\nconst sections = document.querySelectorAll('.web-section')\r\nconst projectSelectors = document.querySelectorAll('.item-selector-header button')\r\nconst projectsArr = document.querySelectorAll('.project')\r\nconst modal = document.querySelector('.modal')\r\n\r\n// Navlink method to switch active\r\nnavLinks.forEach(link =>{\r\n    link.addEventListener('click', (e) => {\r\n        navLinks.forEach(navlink => navlink.classList.remove('active'))\r\n        e.target.classList.add('active')        \r\n    })\r\n})\r\n\r\n/****** SIDE BAR FUNCTION *****/\r\nconst toggleContainer = () => sidebarContainer.classList.toggle('active')\r\n\r\n// Btn click that open / close of sidebar\r\nsidebarOpenBtn.addEventListener('click',toggleContainer)\r\nsidebarCloseBtn.addEventListener('click', toggleContainer)\r\nsidebarContainer.querySelectorAll('li a').forEach( link => {\r\n    link.addEventListener('click', toggleContainer)\r\n})\r\n\r\n// Touch outside of sidebar container causes it to close \r\nwindow.addEventListener('touchstart', e => {\r\n    const xPosition = e.touches[0].clientX;\r\n    const screenWidth = screen.width;\r\n\r\n    // only if the touch is on the regulat app area and if container is active, then remove class\r\n    if(sidebarContainer.classList.contains('active') && xPosition < screenWidth - 180){\r\n        sidebarContainer.classList.remove('active')\r\n    }\r\n})\r\n\r\n\r\n\r\n/******  IMAGE CAROUSEL *****/\r\n// Window is smaller than 900px\r\nconst widthMatch = window.matchMedia(\"(max-width: 900px)\");\r\n\r\n// get card container, cards array & buttons \r\nconst cardContainer = document.querySelector('.card-container')\r\nconst cardsArr = document.querySelectorAll('.card')\r\nconst nextBtn = document.querySelector('.next')\r\nconst prevBtn = document.querySelector('.prev')\r\n\r\n// declare index of card and interval \r\nlet cardIndex = 0\r\n\r\nconst TIME = 2500\r\n\r\n// Add an interval so it runs every 2seconds\r\nlet interval = setInterval(run,TIME)\r\n\r\n\r\nfunction run(){\r\n    if(widthMatch.matches){\r\n        cardIndex++\r\n        changeCard()\r\n    }\r\n}\r\n\r\n// Change the transform property on the card \r\n// Check the index for edges (first and last)\r\nfunction changeCard(){  \r\n    // if index is at end of list \r\n    if(cardIndex > cardsArr.length - 1){\r\n        cardIndex = 0\r\n    } \r\n    // if index is negative, switch to 1st\r\n    else if(cardIndex < 0){\r\n        cardIndex = cardsArr.length - 1\r\n    }\r\n\r\n    // change the x positon of the card conmtainer\r\n    cardContainer.style.transform = `translateX(${-cardIndex * 300}px)`\r\n}\r\n\r\n\r\n// event listeners for buttons \r\nnextBtn.addEventListener('click', () =>{\r\n    cardIndex++\r\n    changeCard()\r\n    clearInterval(interval)\r\n\r\n})\r\nprevBtn.addEventListener('click', () =>{\r\n    cardIndex--\r\n    changeCard()\r\n    clearInterval(interval)\r\n    setInterval(interval,TIME)\r\n})\r\n\r\n// mm in the function arg is the matchMedia object, passed back into the function\r\nwidthMatch.addEventListener('change', function(mm) {\r\n    cardIndex = 0\r\n    changeCard()\r\n});\r\n\r\n\r\n\r\n/***** SCROLL NAVIGATION FUNCTIONALLITY  */\r\nfunction isSectionOnTheTop() {\r\n    // Grab the height and y position\r\n    sections.forEach((el, i) => {\r\n        const vHeight = window.innerHeight || document.documentElement.clientHeight\r\n        const yPositionInScreen = el.getBoundingClientRect().y\r\n        const yPercentage = yPositionInScreen / vHeight\r\n        // active range to be 0 => 40%\r\n        if(yPercentage >= 0 && yPercentage <= 0.40){\r\n            navLinks.forEach(navlink => navlink.classList.remove('active'))\r\n            document.querySelector(`.${el.id}-link`).classList.add('active')\r\n        }\r\n    })\r\n}\r\nwindow.addEventListener('scroll', ()=>{\r\n    isSectionOnTheTop()\r\n})\r\n\r\n\r\n\r\n/*******PROJECT SELECTOR FUNCTIONALITY */\r\nprojectSelectors.forEach(btn =>{\r\n    btn.addEventListener('click', (e) => {\r\n        const clickedTabType = e.target.getAttribute('tab')\r\n    \r\n        // remove the active class from all the btns and add it to the clicked btn\r\n        projectSelectors.forEach(navlink => navlink.classList.remove('active'))\r\n        e.target.classList.add('active')\r\n\r\n        projectsArr.forEach(project => {\r\n            const projectType = project.getAttribute('type')\r\n            // if project has matching type, then add the show class \r\n            if(projectType === clickedTabType){\r\n                project.classList.add('active')\r\n            }\r\n            // else if type is all, add active class\r\n            else if(clickedTabType === 'all') {\r\n                project.classList.add('active')\r\n            }\r\n            // else, remove the active class\r\n            else{\r\n                project.classList.remove('active')\r\n            }\r\n        })\r\n    })\r\n})\r\n\r\n/*******MODAL FUNCTIONALITY */\r\nconst modalFeed = document.querySelector('.modal .picture-feed')\r\nconst modalClose = document.querySelector('.modal .close-btn')\r\nconst modalNext = document.querySelector('.modal .next')\r\nconst modalPrev = document.querySelector('.modal .prev')\r\nconst modalPictureCounter = document.querySelector('#modal-pic-number')\r\n\r\nlet modalIndex = 0;\r\n\r\n// Add event listener to all of the images under the projects\r\ndocument.querySelectorAll('.project .project-images img').forEach(img => {\r\n    img.addEventListener('click', e => {\r\n        // get parent of clicked target\r\n        const parent = e.target.parentElement\r\n\r\n        // select the minified img element\r\n        const minImageEl = parent.querySelector('[minVersion]')\r\n\r\n        // extract the file name of the min file\r\n        const fileName = minImageEl.getAttribute('minVersion')\r\n        const assetType = minImageEl.getAttribute('assetType')\r\n\r\n        // console.log(assetType,fileName)\r\n        console.log(imgAssets)\r\n        // console.log(imgAssets[assetType][fileName])\r\n\r\n        // change the src of the image to the new filename \r\n        minImageEl.src = imgAssets[assetType][fileName]\r\n\r\n        // move the inside of parent to the modal\r\n        modalFeed.innerHTML = parent.innerHTML\r\n\r\n        // inser the html for the picture counter \r\n        modalPictureCounter.innerHTML = `1/${parent.children.length}`\r\n\r\n        // make the modal active \r\n        modal.classList.add('active')\r\n    })\r\n})\r\n\r\nmodalClose.addEventListener('click', ()=>{\r\n    modal.classList.remove('active')\r\n})\r\n\r\nmodalNext.addEventListener('click', ()=>{\r\n    changePictureInModal(1)\r\n})\r\n\r\nmodalPrev.addEventListener('click', ()=>{\r\n    changePictureInModal(-1)\r\n})\r\n\r\n// loop each image and set active the image that has the index \r\nfunction changePictureInModal(change){\r\n    modalIndex += change\r\n    const modalPictures = document.querySelectorAll('.modal .picture-feed img')\r\n    \r\n    //If number is out of bounds, correct it \r\n    if(modalIndex > modalPictures.length - 1) modalIndex = 0\r\n    if(modalIndex < 0) modalIndex = modalPictures.length - 1\r\n\r\n    modalPictures.forEach( (img, arrindex) =>{\r\n        if(arrindex === modalIndex){\r\n            img.classList.add('active')\r\n            modalPictureCounter.innerHTML = `${arrindex + 1}/${modalPictureCounter.innerHTML.split('/')[1]}`\r\n        } else {\r\n            img.classList.remove('active')\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}