{"version":3,"sources":["js/index.js"],"names":["navLinks","document","querySelectorAll","sidebarOpenBtn","querySelector","sidebarCloseBtn","sidebarContainer","sectionTitles","sections","projectSelectors","projectsArr","modal","forEach","link","addEventListener","e","navlink","classList","remove","target","add","toggleContainer","toggle","window","xPosition","touches","clientX","screenWidth","screen","width","contains","widthMatch","matchMedia","cardContainer","cardsArr","nextBtn","prevBtn","cardIndex","interval","setInterval","run","matches","changeCard","length","style","transform","isSectionOnTheTop","el","i","vHeight","innerHeight","documentElement","clientHeight","yPercentage","getBoundingClientRect","y","id","mm","btn","clickedTabType","getAttribute","project","modalFeed","modalClose","modalNext","modalPrev","modalPictureCounter","modalIndex","changePictureInModal","change","modalPictures","img","arrindex","innerHTML","split","parent","parentElement","children"],"mappings":"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","file":"js.8c96cef8.js","sourceRoot":"..","sourcesContent":["const navLinks = document.querySelectorAll('.nav-link')\nconst sidebarOpenBtn = document.querySelector('#sidebar-btn')\nconst sidebarCloseBtn = document.querySelector('#sidebar-close')\nconst sidebarContainer = document.querySelector('.sidebar-container')\nconst sectionTitles = document.querySelectorAll('.section-title')\nconst sections = document.querySelectorAll('.web-section')\nconst projectSelectors = document.querySelectorAll('.item-selector-header button')\nconst projectsArr = document.querySelectorAll('.project')\nconst modal = document.querySelector('.modal')\n\n// Navlink method to switch active\nnavLinks.forEach(link =>{\n    link.addEventListener('click', (e) => {\n        navLinks.forEach(navlink => navlink.classList.remove('active'))\n        e.target.classList.add('active')\n    })\n})\n\n/****** SIDE BAR FUNCTION *****/\nconst toggleContainer = () => sidebarContainer.classList.toggle('active')\n\n// Btn click that open / close of sidebar\nsidebarOpenBtn.addEventListener('click',toggleContainer)\nsidebarCloseBtn.addEventListener('click', toggleContainer)\nsidebarContainer.querySelectorAll('li a').forEach( link => {\n    link.addEventListener('click', toggleContainer)\n})\n\n// Touch outside of sidebar container causes it to close \nwindow.addEventListener('touchstart', e => {\n    const xPosition = e.touches[0].clientX;\n    const screenWidth = screen.width;\n\n    // only if the touch is on the regulat app area and if container is active, then remove class\n    if(sidebarContainer.classList.contains('active') && xPosition < screenWidth - 180){\n        sidebarContainer.classList.remove('active')\n    }\n})\n\n\n\n/******  IMAGE CAROUSEL *****/\n// Window is smaller than 900px\nconst widthMatch = window.matchMedia(\"(max-width: 900px)\");\n\n// get card container, cards array & buttons \nconst cardContainer = document.querySelector('.card-container')\nconst cardsArr = document.querySelectorAll('.card')\nconst nextBtn = document.querySelector('.next')\nconst prevBtn = document.querySelector('.prev')\n\n// declare index of card and interval \nlet cardIndex = 0\n\n// Add an interval so it runs every 2seconds\nlet interval = setInterval(run,3500)\n\nfunction run(){\n    if(widthMatch.matches){\n        cardIndex++\n        changeCard()\n    }\n}\n\n// Change the transform property on the card \n// Check the index for edges (first and last)\nfunction changeCard(){  \n    // if index is at end of list \n    if(cardIndex > cardsArr.length - 1){\n        cardIndex = 0\n    } \n    // if index is negative, switch to 1st\n    else if(cardIndex < 0){\n        cardIndex = cardsArr.length - 1\n    }\n\n    // change the x positon of the card conmtainer\n    cardContainer.style.transform = `translateX(${-cardIndex * 300}px)`\n}\n\n\n// event listeners for buttons \nnextBtn.addEventListener('click', () =>{\n    cardIndex++\n    changeCard()\n})\nprevBtn.addEventListener('click', () =>{\n    cardIndex--\n    changeCard()\n})\n\n// mm in the function arg is the matchMedia object, passed back into the function\nwidthMatch.addEventListener('change', function(mm) {\n    cardIndex = 0\n    changeCard()\n});\n\n\n\n/***** SCROLL NAVIGATION FUNCTIONALLITY  */\nfunction isSectionOnTheTop() {\n    // Grab the height and y position\n    sections.forEach((el, i) => {\n        const vHeight = window.innerHeight || document.documentElement.clientHeight\n        const yPositionInScreen = el.getBoundingClientRect().y\n        const yPercentage = yPositionInScreen / vHeight\n        // active range to be 0 => 40%\n        if(yPercentage >= 0 && yPercentage <= 0.40){\n            navLinks.forEach(navlink => navlink.classList.remove('active'))\n            document.querySelector(`.${el.id}-link`).classList.add('active')\n        }\n    })\n}\nwindow.addEventListener('scroll', ()=>{\n    isSectionOnTheTop()\n})\n\n\n\n/*******PROJECT SELECTOR FUNCTIONALITY */\nprojectSelectors.forEach(btn =>{\n    btn.addEventListener('click', (e) => {\n        const clickedTabType = e.target.getAttribute('tab')\n    \n        // remove the active class from all the btns and add it to the clicked btn\n        projectSelectors.forEach(navlink => navlink.classList.remove('active'))\n        e.target.classList.add('active')\n\n        projectsArr.forEach(project => {\n            const projectType = project.getAttribute('type')\n            // if project has matching type, then add the show class \n            if(projectType === clickedTabType){\n                project.classList.add('active')\n            }\n            // else if type is all, add active class\n            else if(clickedTabType === 'all') {\n                project.classList.add('active')\n            }\n            // else, remove the active class\n            else{\n                project.classList.remove('active')\n            }\n        })\n    })\n})\n\n/*******MODAL FUNCTIONALITY */\nconst modalFeed = document.querySelector('.modal .picture-feed')\nconst modalClose = document.querySelector('.modal .close-btn')\nconst modalNext = document.querySelector('.modal .next')\nconst modalPrev = document.querySelector('.modal .prev')\nconst modalPictureCounter = document.querySelector('#modal-pic-number')\n\nlet modalIndex = 0;\n\n// Add event listener to all of the images under the projects\ndocument.querySelectorAll('.project .project-images img').forEach(img => {\n    img.addEventListener('click', e => {\n        // get parent of clicked target\n        const parent = e.target.parentElement\n\n        // move the inside of parent to the modal\n        modalFeed.innerHTML = parent.innerHTML\n\n        // inser the html for the picture counter \n        modalPictureCounter.innerHTML = `1/${parent.children.length}`\n\n        // make the modal active \n        modal.classList.add('active')\n    })\n})\n\nmodalClose.addEventListener('click', ()=>{\n    modal.classList.remove('active')\n})\n\nmodalNext.addEventListener('click', ()=>{\n    changePictureInModal(1)\n})\n\nmodalPrev.addEventListener('click', ()=>{\n    changePictureInModal(-1)\n})\n\n// loop each image and set active the image that has the index \nfunction changePictureInModal(change){\n    modalIndex += change\n    const modalPictures = document.querySelectorAll('.modal .picture-feed img')\n    \n    //If number is out of bounds, correct it \n    if(modalIndex > modalPictures.length - 1) modalIndex = 0\n    if(modalIndex < 0) modalIndex = modalPictures.length - 1\n\n    modalPictures.forEach( (img, arrindex) =>{\n        if(arrindex === modalIndex){\n            img.classList.add('active')\n            modalPictureCounter.innerHTML = `${arrindex + 1}/${modalPictureCounter.innerHTML.split('/')[1]}`\n        } else {\n            img.classList.remove('active')\n        }\n    })\n}\n\n\n\n\n\n\n\n\n\n\n\n"]}